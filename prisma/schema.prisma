generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model account {
  id                String   @id @db.VarChar(191)
  userId            String   @db.VarChar(191)
  type              String   @db.VarChar(191)
  provider          String   @db.VarChar(191)
  providerAccountId String   @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?  @db.VarChar(191)
  scope             String?  @db.VarChar(191)
  id_token          String?
  session_state     String?  @db.VarChar(191)
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "account_userId_fkey")

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model alat {
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  nama_alat   String   @db.VarChar(255)
  status      String   @default("PENDING") @db.VarChar(191)
  alat_id     Int      @id @default(autoincrement())
  jumlah_alat String   @db.VarChar(255)
}

model authenticator {
  credentialID         String  @unique @db.VarChar(191)
  userId               String  @db.VarChar(191)
  providerAccountId    String  @db.VarChar(191)
  credentialPublicKey  String  @db.VarChar(191)
  counter              Int
  credentialDeviceType String  @db.VarChar(191)
  credentialBackedUp   Int     @db.SmallInt
  transports           String? @db.VarChar(191)
  user                 user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "authenticator_userId_fkey")

  @@id([userId, credentialID])
}

model bahan {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  nama_bahan    String    @db.VarChar(255)
  status        String    @default("PENDING") @db.VarChar(191)
  bahan_id      Int       @id @default(autoincrement())
  tipe_bahan    String    @db.VarChar(255)
  jumlah_bahan  String    @db.VarChar(255)
  rumus_bahan   String    @db.VarChar(255)
}

model barang {
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  nama_barang   String   @db.VarChar(255)
  merk_barang   String   @db.VarChar(255)
  tipe_barang   String   @db.VarChar(255)
  barang_id     Int      @id @default(autoincrement())
  jumlah_barang String   @db.VarChar(255)
}

model instrumen {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  nama_instrumen String   @db.VarChar(255)
  merk_instrumen String   @db.VarChar(255)
  tipe_instrumen String   @db.VarChar(255)
  layanan        String   @db.VarChar(255)
  status         String   @default("PENDING") @db.VarChar(191)
  image_url      String?  @db.VarChar(191)
  instrumen_id   Int      @id @default(autoincrement())
  rental         rental[]
}

model rental {
  id                 Int       @id @default(autoincrement())
  status             String    @db.VarChar(191)
  purpose            String    @db.VarChar(191)
  actual_return_date DateTime?
  end_date           DateTime
  start_date         DateTime
  user_id            String    @db.VarChar(191)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  instrumen_id       Int
  instrumen          instrumen @relation(fields: [instrumen_id], references: [instrumen_id], onDelete: NoAction, map: "rental_instrumen_id_fkey")
  user               user      @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "rental_user_id_fkey")

  @@index([instrumen_id])
  @@index([user_id])
}

model session {
  id           String   @id @db.VarChar(191)
  sessionToken String   @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "session_userId_fkey")

  @@unique([userId, sessionToken])
  @@index([userId])
}

model user {
  email         String?         @unique @db.VarChar(191)
  name          String?         @db.VarChar(191)
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?         @db.VarChar(191)
  password      String?         @db.VarChar(191)
  updatedAt     DateTime
  id            String          @id @db.VarChar(191)
  role          user_role       @default(USER)
  account       account[]
  authenticator authenticator[]
  rental        rental[]
  session       session[]
}

model verificationtoken {
  identifier String   @db.VarChar(191)
  token      String   @db.VarChar(191)
  expires    DateTime

  @@unique([identifier, expires])
}

model fileasset {
  id        String   @id @default(cuid())
  filename  String
  mimeType  String
  size      Int
  data      Bytes
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum user_role {
  USER
  ADMIN
}
