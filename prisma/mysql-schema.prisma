// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  TERSEDIA
  PENDING
}

enum UserRole {
  USER
  ADMIN
}

model Instrumen {
  instrumen_id        Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  nama_instrumen      String      @db.VarChar(255)
  merk_instrumen      String      @db.VarChar(255)
  tipe_instrumen      String      @db.VarChar(255)
  layanan             String      @db.VarChar(255)
  status              String      @default("PENDING") // Custom boolean-like field
  image_url           String?   // Add this field for storing image URLs

  // Add this line to connect to rentals
  rentals             Rental[]  
}

model Alat {
  alat_id             Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  nama_alat           String      @db.VarChar(255)
  jumlah_alat         String      @db.VarChar(255)
  status              String      @default("PENDING") // Custom boolean-like field
}

model Barang {
  barang_id           Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  nama_barang         String      @db.VarChar(255)
  merk_barang         String      @db.VarChar(255)
  tipe_barang         String      @db.VarChar(255)
  jumlah_barang       String      @db.VarChar(255)
}

model Bahan {
  bahan_id            Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  nama_bahan          String      @db.VarChar(255)
  tipe_bahan          String      @db.VarChar(255)
  status              String      @default("PENDING") // Custom boolean-like field
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER) // Using enum
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  rentals       Rental[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String      @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String 
  refresh_token     String?     @db.Text
  access_token      String?     @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Rental {
  id                  Int      @id @default(autoincrement())
  instrumen_id        Int
  instrumen           Instrumen @relation(fields: [instrumen_id], references: [instrumen_id])
  user_id             String
  user                User     @relation(fields: [user_id], references: [id])
  purpose             String
  start_date          DateTime
  end_date            DateTime
  actual_return_date  DateTime?
  status              String   // "TERSEDIA", "PENDING"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
} 
